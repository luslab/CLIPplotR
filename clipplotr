#!/usr/bin/env Rscript

# Script to plot multiple CLIP tracks with gene structures
# A. M. Chakrabarti
# C. Capitanchik
# Last updated: 8th June 2020

# ==========
# Preamble
# ==========

suppressPackageStartupMessages(library(optparse))

option_list <- list(make_option(c("-x", "--xlinks"), action = "store", type = "character", help = "Input iCLIP bedgraphs (comma separated)"),
                    make_option(c("-l", "--labels"), action = "store", type = "character", help = "Unique iCLIP bedgraph labels (comma separated in same order as files)"),
                    make_option(c("-c", "--colours"), action = "store", type = "character", help = "iCLIP bedgraph colours (comma separated)"),
                    make_option(c("", "--groups"), action = "store", type = "character", help = "Grouping of iCLIP bedgraphs for separate plots (comma separated)"),
                    make_option(c("-y", "--auxiliary"), action = "store", type = "character", help = "BED file(s) of auxiliary data (comma separated)"),
                    make_option(c("", "--auxiliary_labels"), action = "store", type = "character", help = "Labels for auxiliary data (comma separated in same order as files)"),
                    make_option(c("", "--coverage"), action = "store", type = "character", help = "bigwig coverage files (e.g. RNA-seq or Quantseq) - ensure same strand as region of interest (comma separated)"),
                    make_option(c("", "--coverage_labels"), action = "store", type = "character", help = "Labels for coverage data (comma separated in same order as files)"),
                    make_option(c("", "--coverage_colours"), action = "store", type = "character", help = "Colours for coverage data (comma separated in same order as files)"),
                    make_option(c("", "--coverage_groups"), action = "store", type = "character", help = "Grouping of coverage data (comma separated in same order as files)"),
                    make_option(c("-g", "--gtf"), action = "store", type = "character", help = "Reference GTF file (Gencode)"),
                    make_option(c("", "--no_ucsc"), action = "store_true", type = "logical", help = "GTF has non-standard sequences", default = FALSE),
                    make_option(c("-r", "--region"), action = "store", type = "character", help = "Region of interest as chr3:35754106:35856276:+ or gene as ENSMUSG00000037400 or Atp11b"),
                    make_option(c("", "--highlight"), action = "store", type = "character", help = "Region to highlight as 35754106:35856276"),                    
                    make_option(c("-n", "--normalisation"), action = "store", type = "character", help = "Normalisation options: none, maxpeak, libsize, custom, libsize_maxpeak, custom_maxpeak [default %default]", default = "libsize"),
                    make_option(c("", "--size_factors"), action = "store", type = "character", help = "Size factors for custom normalisation (comma separated)"),
                    make_option(c("", "--scale_y"), action = "store_true", type = "logical", help = "Scale CLIP y-axis for each group independently", default = FALSE),
                    make_option(c("", "--tidy_y_labels"), action = "store", type = "integer", help = "Keep this many y-axis labels (may be slightly more or fewer depending on data)"),
                    make_option(c("", "--flip_x"), action = "store_true", type = "logical", help = "Flip the x-axis for plotting e.g. genes on the negative strand", default = FALSE),
                    make_option(c("-s", "--smoothing"), action = "store", type = "character", help = "Smoothing options: none, rollmean, gaussian [default %default]", default = "rollmean"),
                    make_option(c("-w", "--smoothing_window"), action = "store", type = "integer", help = "Smoothing window [default %default]", default = 100),
                    make_option(c("-a", "--annotation"), action = "store", type = "character", help = "Annotation options: original, gene, transcript, none [default %default]", default = "transcript"),
                    make_option(c("", "--size_x"), action = "store", type = "integer", help = "Plot size in mm (x) [default: %default]", default = 210),
                    make_option(c("", "--size_y"), action = "store", type = "integer", help = "Plot size in mm (y) [default: %default]", default = 297),
                    make_option(c("", "--ratios"), action = "store", type = "character", help = "Specify plot ratios in order: xlink track, auxiliary tracks, coverage track, annotation track \
                    (comma separated). Put 0 if any of these track types are absent. \
                    [default: 2 for xlinks, 0.25 for 1 auxiliary track 0.5 for >1, \
                    2 for coverage, 3 for annotation]"),
                    make_option(c("-o", "--output"), action = "store", type = "character", help = "Output plot filename"),
                    make_option(c("", "--verbose"), action = "store_true", type = "logical", help = "Verbose", default = FALSE))

opt_parser = OptionParser(option_list = option_list)
opt <- parse_args(opt_parser)

if(opt$verbose) print(opt)
# if(opt$verbose) saveRDS(opt, "opt.rds")

# ==========
# Checks for minimum parameters
# ==========

if(is.null(opt$xlinks)) {

  message("ERROR: No iCLIP bedgraphs supplied")
  quit(save = "no")

}

if(is.null(opt$gtf)) {

  message("ERROR: No Reference GTF supplied")
  quit(save = "no")

}

if(is.null(opt$region)) {

  message("ERROR: region of interest needed to be supplied as e.g. chr3:35754106:35856276:+ or gene as ENSMUSG00000037400 or Atp11bd")
  quit(save = "no")

}

if(is.null(opt$output)) {

  message("ERROR: No output defined")
  quit(save = "no")

}

if(file.exists(opt$output)) {

 message("WARNING: Output file '", opt$output, "' exists and will be overwritten!")

}

# Check switches

if(!opt$normalisation %in% c("none", "maxpeak", "libsize", "custom", "custom_maxpeak", "libsize_maxpeak")) {
  
  message("ERROR: normalisation needs to be one of none, maxpeak, libsize, custom, libsize_maxpeak or custom_maxpeak")
  quit(save = "no")
  
}

if(opt$normalisation == "custom" | opt$normalisation == "custom_maxpeak") {
  
  if(is.null(opt$size_factors)) {
  
  message("ERROR: for custom or custom_maxpeak normalisation size factors need to be provided")
  quit(save = "no")

  }
  
}

if(!is.null(opt$ratios)) {
  rts = unlist(strsplit(opt$ratios, ","))
  if(length(rts) != 4){
    message("ERROR: --ratios, please provide 4 values in order: xlink track, auxiliary tracks, \
    coverage track, annotation track (space separated). If a track is absent \
    put 0.")
    quit(save = "no")
  }

}

if(!opt$smoothing %in% c("none", "rollmean", "gaussian")) {
  
  message("ERROR: smoothing needs to be one of none, rollmean, or gaussian")
  quit(save = "no")
  
}

# ==========
# Load libraries
# ==========

suppressPackageStartupMessages(library(rtracklayer))
suppressPackageStartupMessages(library(GenomicFeatures))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(ggthemes))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(patchwork))
suppressPackageStartupMessages(library(smoother))
suppressPackageStartupMessages(library(zoo))
suppressPackageStartupMessages(library(data.table))

# ==========
# Functions
# ==========

ImportiMapsBedgraph <- function(bedgraph.file) {
  
  bg <- import.bedGraph(bedgraph.file)
  
  # Assign strand based on score
  strand(bg)[bg$score < 0] <- "-"
  strand(bg)[bg$score > 0] <- "+"
  
  # Convert scores to positives now that strands assigned
  bg$score <- abs(bg$score)
  
  if(!opt$no_ucsc) seqlevelsStyle(bg) <- "UCSC"
  return(bg)
  
}

SubsetBedgraph <- function(gr, selected.region.gr) {
  
  xlinks.gr <- unlist(tile(selected.region.gr, width = 1))
  
  ol <- findOverlaps(xlinks.gr, gr)
  xlinks.gr$score <- 0
  xlinks.gr[queryHits(ol)]$score <- gr[subjectHits(ol)]$score
  # xlinks.gr$score[is.na(xlinks.gr$score)] <- 0
  
  return(xlinks.gr)
  
}

# ==========
# Part 0 - Create annotation and get relevant regions in bedgraphs
# ==========

# Create rosetta and TxDb
message("INFO: Loading annotation GTF")

gtf <- rtracklayer::import.gff2(opt$gtf)
if(!opt$no_ucsc) seqlevelsStyle(gtf) <- "UCSC"
genes.gr <- gtf[gtf$type == "gene"]

# Create TxDb if doesn't already exist
if(file.exists(gsub(".gtf.gz|.gtf", ".sqlite", opt$gtf))) {

  message("INFO: ...loading pre-existing annotation database")    
  TxDb <- loadDb(gsub(".gtf.gz|.gtf", ".sqlite", opt$gtf))
  if(!opt$no_ucsc) seqlevelsStyle(TxDb) <- "UCSC"
  
} else {

  message("INFO: ...creating annotation database for future runs")
  TxDb <- suppressMessages(makeTxDbFromGFF(opt$gtf))
  if(!opt$no_ucsc) seqlevelsStyle(TxDb) <- "UCSC"
  saveDb(TxDb, gsub(".gtf.gz|.gtf", ".sqlite", opt$gtf))

}

# Define region
if(grepl("^ENS", opt$region)) {
  
  region.gr <- genes.gr[grepl(opt$region, genes.gr$gene_id)]
  
} else if(grepl(":", opt$region)) {
  
  region.gr <- GRanges(seqnames = Rle(sapply(strsplit(opt$region, ":"), "[[", 1)),
                       ranges = IRanges(start = as.integer(sapply(strsplit(opt$region, ":"), "[[", 2)),
                                        end = as.integer(sapply(strsplit(opt$region, ":"), "[[", 3))),
                       strand = Rle(sapply(strsplit(opt$region, ":"), "[[", 4)))
} else {
  # region.gr <- genes.gr[grepl(opt$region, genes.gr$gene_name)]
  region.gr <- genes.gr[opt$region == genes.gr$gene_name]
  if(!opt$no_ucsc) seqlevelsStyle(region.gr) <- "UCSC"

}

seqlevels(region.gr) <- as.character(unique(seqnames(region.gr))) # Cut down to one seqlevels for later comparision

if(length(region.gr) > 1) {

  stop("ERROR: There are more than one genes with the given identifier. Consider specifying the coordinates instead.")

}

print(region.gr)

# ==========
# Part 1a - top half: normalised and smoothed tracks
# ==========

# Read in xlinks
message("INFO: Plotting crosslink track(s)")
xlink.files <- strsplit(opt$xlinks, ",")[[1]]

if(all(grepl("bedgraph$|bedgraph.gz$", xlink.files))) {

  xlinks <- lapply(xlink.files, ImportiMapsBedgraph)

} else if(all(grepl("bed$|bed.gz$", xlink.files))) {

  xlinks <- lapply(xlink.files, function(x) {
    
    xlinks.gr <- import.bed(x)
    if(!opt$no_ucsc) seqlevelsStyle(xlinks.gr) <- "UCSC"
    return(xlinks.gr)

  })

} else {

  stop("ERROR: Crosslink files need to be in iCount bedgraph or bed format.")
  quit(save = "no")

}

# Actually only need to do this if normalisation strategy is libSize
if(opt$normalisation %in% c("libsize", "maxpeak", "libsize_maxpeak", "none")) {
  
  libSizes <- lapply(xlinks, function(x) { sum(abs(x$score)) })

} else if(opt$normalisation == "custom" | opt$normalisation == "custom_maxpeak") {
  
  if(is.null(opt$size_factors)) {
    
    message("ERROR: No size factors defined")
    quit(save = "no")
    
  }
  
  libSizes <- as.numeric(strsplit(opt$size_factors, ",")[[1]])
  
}
# Subset for region and add in 0 count position
xlinks <- lapply(xlinks, function(x) SubsetBedgraph(gr = x, selected.region.gr = region.gr))

# Names of bedgraphs: If name is supplied use that, if not then generate a name from the file name
if (!is.null(opt$label)) {
  
  track_names <- strsplit(opt$label, ",")[[1]]

} else {
  
  track_names <- lapply(strsplit(opt$xlinks, ",")[[1]], function(x) substr(basename(x), start = 1, stop = 10))
  
}

# Create datatable for plotting
xlinks.dt <- lapply(seq_along(xlinks), function(i) {
  
  dt <- as.data.table(xlinks[[i]])
  dt$sample <- track_names[[i]]
  dt$libSize <- libSizes[[i]]
  return(dt)
  
})
xlinks.dt <- rbindlist(xlinks.dt)  
setkey(xlinks.dt, sample)

# Do the normalisation
message("INFO: ...normalising")
xlinks.dt[, norm := switch(opt$normalisation, 
                           "libsize" = (score * 1e6)/libSize,
                           "libsize_maxpeak" = (score * 1e6)/libSize,
                          #  "maxpeak" = score/max(score),
                          #  "maxpeak" = (score * 1e6)/libSize,
                           "maxpeak" = score,
                           "none" = score,
                           "custom" = score/libSize,
                           "custom_maxpeak" = score/libSize), 
          by = sample]

# Do the smoothing
message("INFO: ...smoothing")
xlinks.dt[, smoothed := switch(opt$smoothing, 
                               "gaussian" = smth.gaussian(norm, window = opt$smoothing_window),
                               "rollmean" = rollmean(norm, opt$smoothing_window, fill = 0),
                               "none" = norm), 
          by = sample]

# Assign groups
if(!is.null(opt$groups)) {

  groups.dt <- data.table(sample = track_names, grp = strsplit(opt$group, ",")[[1]])
  groups.dt$grp <- factor(groups.dt$grp, levels = unique(strsplit(opt$group, ",")[[1]]))
  xlinks.dt <- merge(xlinks.dt, groups.dt, by = "sample")

}

# Now normalise to max peak after smoothing
if(grepl("maxpeak",opt$normalisation) & is.null(opt$groups)) xlinks.dt[, smoothed := smoothed/(max(smoothed)), by = sample]
if(grepl("maxpeak",opt$normalisation) & !is.null(opt$groups)) xlinks.dt[, smoothed := smoothed/(max(smoothed)), by = grp]

y.label <- switch(opt$normalisation, 
                  "libsize" = "Crosslink signal\n(counts per million)",
                  "libsize_maxpeak" = "Crosslink signal\n(counts per million\nnormalised to max peak)",
                  "maxpeak" = "Crosslink signal\n(normalised to max peak)",
                  "none" = "Raw crosslink signal",
                  "custom" = "Crosslink signal\n(custom normalisation)",
                  "custom_maxpeak" = "Crosslink signal\n(custom normalisation\nadjusted to max peak)")

# Plot top half
if(is.null(opt$colours)) {

p.iclip <- ggplot(xlinks.dt) +
  geom_line(aes(x = start, y = smoothed, group = sample, color = sample)) +
  labs(title = opt$region,
       x = "",
       y = y.label,
       colour = "") +
  scale_colour_tableau(palette = "Tableau 10") +
  theme_minimal_grid() + theme(legend.position = "top") #+
  # xlim(start(region.gr),end(region.gr))

  } else {

    cols <- strsplit(opt$colours, ",")[[1]]
    names(cols) <- track_names

    p.iclip <- ggplot(xlinks.dt) +
      geom_line(aes(x = start, y = smoothed, group = sample, color = sample)) +
      labs(title = opt$region,
           x = "",
           y = y.label,
           colour = "") +
      scale_colour_manual(values = cols) +
      theme_minimal_grid() + theme(legend.position = "top") #+
      # xlim(start(region.gr),end(region.gr))

}

# Change y-axis label depending on normalisation

# Facet if groups
if(!is.null(opt$groups)) {

  if(opt$scale_y == TRUE) {

    p.iclip <- p.iclip + facet_grid(grp ~ ., scales = "free_y", labeller = label_wrap_gen(10)) + theme(strip.text.y = element_text(size = 10, angle = 0, hjust = 0))

  } else {

    p.iclip <- p.iclip + facet_grid(grp ~ ., labeller = label_wrap_gen(10)) + theme(strip.text.y = element_text(size = 10, angle = 0, hjust = 0))

  }
}

# Add highlight
if(!is.null(opt$highlight)) {

  highlight.dt <- data.table(x1 = as.integer(strsplit(opt$highlight, ":")[[1]][1]),
                             x2 = as.integer(strsplit(opt$highlight, ":")[[1]][2]),
                             y1 = 0,
                             y2 = Inf) # Assumes not facetted with free scales
  p.iclip <- p.iclip + geom_rect(data = highlight.dt, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = "grey50", alpha = 0.2)
  
}

if(!is.null(opt$tidy_y_labels)) {

  # p.iclip <- p.iclip + scale_y_continuous(breaks = scales::breaks_extended(n = opt$tidy_y_labels))
  p.iclip <- p.iclip + scale_y_continuous(n.breaks = opt$tidy_y_labels)

}

if(opt$flip_x) {

  p.iclip <- p.iclip + scale_x_reverse(limits = rev(c(start(region.gr), end(region.gr))))

} else {

  p.iclip <- p.iclip + scale_x_continuous(limits = c(start(region.gr), end(region.gr)))

}

# ==========
# Part 1b - top half: auxiliary file annotation (eg.peaks)
# ==========

if(!is.null(opt$auxiliary)) {

  message("INFO: Plotting auxiliary track(s)")

  auxiliary.files <- strsplit(opt$auxiliary, ",")[[1]]

  # Names of bedgraphs: If name is supplied use that, if not then generate a name from the file name
  if (!is.null(opt$auxiliary_labels)) {
  
    auxiliary.labels <- strsplit(opt$auxiliary_labels, ",")[[1]]
  
  } else {
  
    auxiliary.labels <- substr(gsub(".bed|.bed.gz", "", basename(auxiliary.files)), start = 1, stop = 10)
  
  }


  auxiliary.grl <- lapply(auxiliary.files, function(x) {
    
    auxiliary.gr <- import.bed(x)
    if(!opt$no_ucsc) seqlevelsStyle(auxiliary.gr) <- "UCSC"
    return(auxiliary.gr)

  })

  auxiliary.grl <- lapply(auxiliary.grl, function(x) subsetByOverlaps(x, region.gr, ignore.strand = FALSE))

  auxiliary.dt <- rbindlist(lapply(auxiliary.grl, as.data.table))
  auxiliary.dt$exp <- rep(auxiliary.labels, elementNROWS(auxiliary.grl))
  auxiliary.dt$centre <- with(auxiliary.dt, start + width/2) # Replace this with data.table syntax, but need to check groups first

  if(nrow(auxiliary.dt) != 0) {

    if("itemRgb" %in% colnames(auxiliary.dt)) {

      auxiliary.cols <- unique(auxiliary.dt$itemRgb)
      names(auxiliary.cols) <- auxiliary.cols
          
      p.auxiliary <- ggplot(auxiliary.dt, aes(x = centre, width = width, y = exp, fill = itemRgb)) +
        geom_tile() +
        scale_y_discrete(breaks = auxiliary.labels,
                         limits = rev(sort(auxiliary.labels))) +
        # xlim(start(region.gr), end(region.gr)) +
        scale_fill_manual(values = auxiliary.cols) +
        labs(y = "",
             x = "") +
        theme_minimal_grid() + theme(legend.position = "none")
      
    } else {
      
      p.auxiliary <- ggplot(auxiliary.dt, aes(x = centre, width = width, y = exp)) +
        geom_tile() +
        scale_y_discrete(breaks = auxiliary.labels,
                         limits = rev(sort(auxiliary.labels))) +
        # xlim(start(region.gr), end(region.gr)) +
        labs(y = "",
             x = "") +
        theme_minimal_grid()
      
    }

  }

  if(opt$flip_x) {

    p.auxiliary <- p.auxiliary + scale_x_reverse(limits = rev(c(start(region.gr), end(region.gr))))

  } else {

    p.auxiliary <- p.auxiliary + scale_x_continuous(limits = c(start(region.gr), end(region.gr)))

  }

}


# ==========
# Part 1c - top half: RNA-seq/coverage tracks
# ==========

if(!is.null(opt$coverage)) {
  
  message("INFO: Plotting coverage track(s)")
  coverage.files <- strsplit(opt$coverage, ",")[[1]]
  # coverage.grl <- lapply(coverage.files, import.bw, selection = region.gr) # addition selection speeds up loading - removed incase seqnames different style
  coverage.grl <- lapply(coverage.files, function(x) {

    gr <- import.bw(x)
    if(!opt$no_ucsc) seqlevelsStyle(gr) <- "UCSC"
    gr <- subsetByOverlaps(gr, region.gr)
    return(gr)

  })

  coverage.grl <- lapply(coverage.grl, function(x) SubsetBedgraph(gr = x, selected.region.gr = region.gr))
  # coverage.grl <- lapply(auxiliary.grl, function(x) subsetByOverlaps(x, region.gr, ignore.strand = FALSE))
  coverage.dt <- rbindlist(lapply(coverage.grl, as.data.table))

  # Names of coverage tracks
  if (!is.null(opt$coverage_labels)) {
  
    coverage.dt$exp <-  rep(strsplit(opt$coverage_labels, ",")[[1]], elementNROWS(coverage.grl))
    coverage.dt$exp <- factor(coverage.dt$exp, levels=strsplit(opt$coverage_labels, ",")[[1]])
  
  } else {
  
    coverage.dt$exp <- rep(gsub(".bw|.bigwig|.bigWig", "", coverage.files), elementNROWS(coverage.grl))
    coverage.dt$exp <- factor(coverage.dt$exp, levels=gsub(".bw|.bigwig|.bigWig", "", coverage.files))
  
  }
  
  if(!is.null(opt$coverage_groups)) {

    coverage_groups.dt <- data.table(exp = factor(levels(coverage.dt$exp), levels(coverage.dt$exp)), grp = strsplit(opt$coverage_groups, ",")[[1]])
    coverage_groups.dt$grp <- factor(coverage_groups.dt$grp, levels = unique(strsplit(opt$coverage_groups, ",")[[1]]))
    coverage.dt <- merge(coverage.dt, coverage_groups.dt, by = "exp")

  }

  if(!is.null(opt$coverage_colours)) {

    coverage_colours <- strsplit(opt$coverage_colours, ",")[[1]]
    names(coverage_colours) <- levels(coverage.dt$exp)

    p.coverage <- ggplot(coverage.dt, aes(x = start, y = score, col = exp)) +
      geom_line() +
      labs(x = "",
          y = "Coverage",
          colour = "") +
      scale_colour_manual(values = coverage_colours) +
      theme_minimal_grid() + theme(legend.position = "bottom") + theme(strip.text.y = element_text(size = 10, angle = 0, hjust = 0)) #+
      # xlim(start(region.gr), end(region.gr))

  } else {

    p.coverage <- ggplot(coverage.dt, aes(x = start, y = score, col = exp)) +
      geom_line() +
      labs(x = "",
           y = "Coverage",
           colour = "") +
      scale_colour_tableau(palette = "Superfishel Stone") +
      theme_minimal_grid() + theme(legend.position = "bottom") + theme(strip.text.y = element_text(size = 10, angle = 0, hjust = 0)) #+
      # xlim(start(region.gr), end(region.gr))

  }

  if(!is.null(opt$coverage_groups)) {

    p.coverage <- p.coverage + facet_grid(grp ~ ., scales = "free_y", labeller = label_wrap_gen(10)) + theme(strip.text.y = element_text(size = 10, angle = 0, hjust = 0))

  }

  if(opt$flip_x) {

    p.coverage <- p.coverage + scale_x_reverse(limits = rev(c(start(region.gr), end(region.gr))))

  } else {

    p.coverage <- p.coverage + scale_x_continuous(limits = c(start(region.gr), end(region.gr)))

  }

}
  
# ==========
# Part 2 - bottom half: gene structures
# ==========

message("INFO: Plotting annotation tracks")

rosetta.dt <- as.data.table(mcols(genes.gr))[, .(gene_id, gene_name)]
setkey(rosetta.dt, gene_id)

# ==========
# Plot gene kind of structure
# ==========

if(opt$annotation == "gene") {

  exons_g.grl <- exonsBy(TxDb, by = "gene")
  
  sel.genes <- subsetByOverlaps(genes.gr, region.gr)
  sel.exons <- exons(TxDb, filter = list(gene_id = sel.genes$gene_id), columns = "gene_id")
  
  # Region (for arrows)
  region.gr$gene_id <- NULL
  region.tiled <- rep(region.gr, length(sel.genes)) # Create one for each gene
  region.tiled <- tile(region.tiled, width = 500)
  
  sel.region.tiled <- GRangesList(lapply(seq_along(sel.genes), function(i) {
    gr <- subsetByOverlaps(region.tiled[[i]], sel.genes[i], type = "any")
    # Need to adjust for ends
    start(gr[1]) <- start(sel.genes[i])
    end(gr[length(gr)]) <- end(sel.genes[i])
    return(gr)
  }))
  
  names(sel.region.tiled) <- sel.genes$gene_id
  sel.region.tiled.dt <- as.data.table(sel.region.tiled)
  setnames(sel.region.tiled.dt, "group_name", "gene_id")
  
  if(as.character(strand(region.gr)) == "-") setnames(sel.region.tiled.dt, c("start", "end"), c("end", "start"))
  
  # Exons
  sel.exons.dt <- as.data.table(sel.exons)
  sel.exons.dt$gene_id <- as.character(sel.exons.dt$gene_id) # otherwise type is AsIs
  sel.exons.dt <- merge(sel.exons.dt, unique(sel.region.tiled.dt[, .(group, gene_id)]), by = "gene_id")
  
  # Plot
  p.annot <- ggplot() +
    geom_segment(data = sel.region.tiled.dt, mapping = aes(x = start, xend = end, y = group, yend = group), arrow = arrow(length = unit(0.1, "cm")), colour = "grey50") +
    geom_rect(data = sel.exons.dt, mapping = aes(xmin = start, xmax = end, ymin = group - 0.25, ymax = group + 0.25, fill = gene_id)) +
    theme_minimal_vgrid() + theme(axis.line.y = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
    scale_fill_tableau() +
    labs(x = "Coordinate",
         y = "",
         fill = "") # +
    # coord_cartesian(xlim = c(start(region.gr), end(region.gr)))

  if(opt$flip_x) {

    p.annot <- p.annot + scale_x_reverse() + coord_cartesian(xlim = rev(c(start(region.gr), end(region.gr))))

  } else {
      
    p.annot <- p.annot + scale_x_continuous() + coord_cartesian(xlim = c(start(region.gr), end(region.gr)))

  }

}

# ==========
# Plot transcript kind of structure
# ==========

if(opt$annotation == "transcript") {
  
  # Get transcripts that overlap region and order for plotting
  sel.tx_genes <- transcriptsByOverlaps(TxDb, region.gr, columns = c("gene_id", "tx_name"))
  sel.tx_genes <- sel.tx_genes[order(width(sel.tx_genes), decreasing = TRUE)]
  tx.order.dt <- data.table(transcript_id = sel.tx_genes$tx_name,
                            gene_id = unlist(sel.tx_genes$gene_id),
                            centre = start(sel.tx_genes) + width(sel.tx_genes)/2)[, group := 1:.N]
  setkey(tx.order.dt, gene_id)
  tx.order.dt <- rosetta.dt[tx.order.dt]
  tx.order.dt[, gene := paste0(gene_name, " | ", gene_id)]
  
  # Region (for arrows)
  region <- region.gr
  region$gene_id <- NULL
  region.tiled <- rep(region, length(sel.tx_genes))
  region.tiled$tx_name <- sel.tx_genes$tx_name
  region.tiled <- tile(region.tiled, width = round(width(region)/15, -1))

  sel.region.tiled <- GRangesList(lapply(seq_along(sel.tx_genes), function(i) {
    gr <- subsetByOverlaps(region.tiled[[i]], sel.tx_genes[i], type = "any")
    start(gr[1]) <- start(sel.tx_genes[i])
    end(gr[length(gr)]) <- end(sel.tx_genes[i])
    return(gr)
  }))
  
  names(sel.region.tiled) <- sel.tx_genes$tx_name
  sel.region.tiled.dt <- as.data.table(sel.region.tiled)
  sel.region.tiled.dt[, group := NULL]
  setnames(sel.region.tiled.dt, "group_name", "transcript_id")
  if(as.character(strand(region.gr)) == "-") setnames(sel.region.tiled.dt, c("start", "end"), c("end", "start"))
  
  sel.region.tiled.dt <- merge(sel.region.tiled.dt, tx.order.dt, by = "transcript_id")
  
  # CDS
  cds_tx <- cdsBy(TxDb, by = "tx", use.names = TRUE)
  sel.cds_tx <- cds_tx[names(cds_tx) %in% sel.tx_genes$tx_name]
  sel.cds_tx.dt <- as.data.table(sel.cds_tx)
  sel.cds_tx.dt[, group := NULL]
  setnames(sel.cds_tx.dt, "group_name", "transcript_id")
  sel.cds_tx.dt <- merge(sel.cds_tx.dt, tx.order.dt, by = "transcript_id")
  
  # UTR5
  utr5_tx <- fiveUTRsByTranscript(TxDb, use.names = TRUE)
  sel.utr5_tx <- utr5_tx[names(utr5_tx) %in% sel.tx_genes$tx_name]
  sel.utr5_tx.dt <- as.data.table(sel.utr5_tx)
  sel.utr5_tx.dt[, group := NULL]
  setnames(sel.utr5_tx.dt, "group_name", "transcript_id") 
  sel.utr5_tx.dt <- merge(sel.utr5_tx.dt, tx.order.dt, by = "transcript_id")
    
  # UTR3
  utr3_tx <- threeUTRsByTranscript(TxDb, use.names = TRUE)
  sel.utr3_tx <- utr3_tx[names(utr3_tx) %in% sel.tx_genes$tx_name]
  sel.utr3_tx.dt <- as.data.table(sel.utr3_tx)
  sel.utr3_tx.dt[, group := NULL]
  setnames(sel.utr3_tx.dt, "group_name", "transcript_id")
  sel.utr3_tx.dt <- merge(sel.utr3_tx.dt, tx.order.dt, by = "transcript_id")
  
  # Exons
  exons_tx <- exonsBy(TxDb, by = "tx", use.names = TRUE)
  sel.exons_tx <- exons_tx[names(exons_tx) %in% sel.tx_genes$tx_name[!sel.tx_genes$tx_name %in% names(sel.cds_tx)]] # Don't want genes with CDS, just e.g. ncRNA
  sel.exons_tx.dt <- as.data.table(sel.exons_tx)
  sel.exons_tx.dt[, group := NULL]
  setnames(sel.exons_tx.dt, "group_name", "transcript_id")
  sel.exons_tx.dt <- merge(sel.exons_tx.dt, tx.order.dt, by = "transcript_id")
  
  # Plot
  p.annot <- ggplot() +
    geom_segment(data = sel.region.tiled.dt, mapping = aes(x = start, xend = end, y = group, yend = group), arrow = arrow(length = unit(0.1, "cm")), colour = "grey50") +
    geom_rect(data = sel.exons_tx.dt, mapping = aes(xmin = start, xmax = end, ymin = group - 0.25, ymax = group + 0.25, fill = gene)) +
    geom_rect(data = sel.cds_tx.dt, mapping = aes(xmin = start, xmax = end, ymin = group - 0.25, ymax = group + 0.25, fill = gene)) +
    geom_rect(data = sel.utr5_tx.dt, mapping = aes(xmin = start, xmax = end, ymin = group - 0.15, ymax = group + 0.15, fill = gene)) +
    geom_rect(data = sel.utr3_tx.dt, mapping = aes(xmin = start, xmax = end, ymin = group - 0.15, ymax = group + 0.15, fill = gene)) +
    scale_fill_tableau() +
    theme_minimal_vgrid() + theme(axis.line.y = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
    labs(x = "Coordinate",
         y = "",
         fill = "") #+
    # coord_cartesian(xlim = c(start(region), end(region)))
  
  if(opt$flip_x) {

    p.annot <- p.annot + scale_x_reverse() + coord_cartesian(xlim = rev(c(start(region.gr), end(region.gr))))

  } else {
      
    p.annot <- p.annot + scale_x_continuous() + coord_cartesian(xlim = c(start(region.gr), end(region.gr)))

  }

}

# ==========
# Omit annotation plot
# ==========

if(opt$annotation == "none") {

  p.annot <- ggplot() + theme_cowplot() + theme(axis.line = element_blank())

}

# ==========
# Old style
# ==========

if(opt$annotation == "original") {

suppressPackageStartupMessages(library(ggbio))

annot.gr <- biovizBase::crunch(TxDb, which = region.gr)
annot.gr$tx_name <- as.character(annot.gr$tx_name)
annot.grl <- split(annot.gr, annot.gr$tx_name)


# Need to trim exons so they don't overlap utrs to ensure they aren't overplotted
# but only if there are exons 
annot.grl <- GRangesList(lapply(annot.grl, function(x) {
  if(any(grepl("exon",x$type))){
    exon <- x[x$type == "exon"]  
    utr <- x[x$type == "utr"]
    strand(utr) <- unique(strand(exon)) # Otherwise utr isn't stranded, but needed for setdiff later
    rest <- x[!x$type %in% c("utr", "exon")]
    
    exon <- GenomicRanges::setdiff(exon, utr, ignore.strand = FALSE)  
    mcols(exon)$type <- "exon"
    
    return(sort(c(rest, exon, utr)))} else {
      return(x)
  }
}))

# Add gene name to labels
gene_names <- gtf$gene_name[match(names(annot.grl), gtf$transcript_id)]
names(annot.grl) <- paste0(gene_names, " - ", names(annot.grl))

p.annot <- ggplot(data = annot.grl) +
  geom_alignment(cds.rect.h = 0.1, length = unit(0.1, "cm"), fill = "black", stat = "identity") +
  labs(x = "Coordinate") +
      xlim(start(region.gr),end(region.gr)) +
  theme_minimal_vgrid() + theme(axis.line.y = element_blank())

# Select out ggplot object
p.annot <- p.annot@ggplot

}

# ==========
# Part 3 - combine plots
# ==========

if(is.null(opt$ratios)){ #if the user hasnt specified ratios
  p <- p.iclip
  ratios <- 2
  if(exists("p.auxiliary")) {
    p <- p / p.auxiliary
    if(length(auxiliary.files) == 1) {
      ratios <- c(ratios, 0.25)
    } else {
      ratios <- c(ratios, 0.5)
    }
  }
  if(exists("p.coverage")) {
    p <- p / p.coverage
    ratios <- c(ratios, 2)
  }
  if(exists("p.annot")) {
    p <- p / p.annot
    ratios <- c(ratios, 3)
    # Could change this to ifelse depending on annotation style
  }
  p <- p + plot_layout(heights = ratios) 
} else { 
  p <- p.iclip
  ratios <- rts[[1]]
  if(exists("p.auxiliary")) {
    p <- p / p.auxiliary
    ratios <- c(ratios, rts[[2]])
  }
  if(exists("p.coverage")) {
    p <- p / p.coverage
    ratios <- c(ratios, rts[[3]])
  }
  if(exists("p.annot")) {
    p <- p / p.annot
    ratios <- c(ratios, rts[[4]])
  }
  p <- p + plot_layout(heights = ratios) 
}

ggsave(p, height = opt$size_y, width = opt$size_x, units = "mm", filename = opt$output)

message("Completed")
